#include "Nextion.h"
#include <HX711_ADC.h>
#if defined(ESP8266)|| defined(ESP32) || defined(AVR)
#include <EEPROM.h>
#endif
#define NumberOf(arg) ((unsigned int) (sizeof (arg) / sizeof (arg [0])))
#define Sigmoid 
#include <NeuralNetwork.h>
          NeuralNetwork *NN;

const int HX711_dout = 5;
const int HX711_sck = 4;
const int trigPin = 9;
const int echoPin = 10;

const unsigned int layers[] = {3,16,1,1};
float *output;

const float inputs[12][3] = {
  {0.25, 0.37, 0.37}, // = 0
  {0.9,  0.9,  0.9}, // = 0
  {0.39, 0.1,  0.37}, // = 0
  {0.28, 0.42, 0.63},  // = 1
  {0.1,  0.23, 0.37}, // = 0
  {0.54, 0.61, 0.63}, // = 0
  {0.39, 0.13, 0.37}, // = 0
  {0.28, 0.42, 0.37}, // = 0
  {0.34, 0.13, 0.1}, // = 0
  {0.66, 0.71, 0.63}, // = 0
  {0.37, 0.23, 0.37}, // = 0
  {0.57, 0.56, 0.63} // = 0
};
const float expectedOutput[12][1] = {{0},{0},{0},{1},{0},{0},{0},{0},{0},{0},{0},{0}};

float maxt=120, mint=0, minb=0,maxb=23, minu=1,maxu=4,nt,nb,nu;

NexNumber n1 = NexNumber(0,6,"n1");
NexNumber n0 = NexNumber(0,5,"n0");
NexNumber n2 = NexNumber(1,11,"n2"); 
NexText   t1 = NexText  (1,6,"t1");

HX711_ADC LoadCell(HX711_dout, HX711_sck);

const int calVal_eepromAdress = 0;
unsigned long t = 0;
long duration;
int distance, tinggi;

void setup() {
  Serial.begin(115200); delay(10);
  nexInit();

  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT); 

  LoadCell.begin();
  float calibrationValue; 
  calibrationValue = 10.5; 

  unsigned long stabilizingtime = 2000;
  boolean _tare = true;
  LoadCell.start(stabilizingtime, _tare);
  if (LoadCell.getTareTimeoutFlag()) {
    while (1);
  }
  else {
    LoadCell.setCalFactor(calibrationValue);
  }
    randomSeed(millis());
  
  NN = new NeuralNetwork(layers,NumberOf(layers)); 
 
  do{
    for (int j = 0; j < NumberOf(inputs); j++){
      NN->FeedForward(inputs[j]);
      NN->BackProp(expectedOutput[j]); 
    }
  }while(NN->getMeanSqrdError(NumberOf(inputs)) > 0.01);
}

float input[3];
void loop() { 
  digitalWrite(trigPin, LOW);
  delay(200);

  digitalWrite(trigPin, HIGH);
  delay(5000);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);

  distance= duration*0.034/2;
  tinggi = 120 - distance;
  n1.setValue(tinggi);
  nt = 0.8*(tinggi - mint)/(maxt-mint)+0.1;

  static boolean newDataReady = 0;
  const int serialPrintInterval = 4500; //increase value to slow down serial print activity

  // check for new data/start next conversion:
  if (LoadCell.update()) newDataReady = true;
  int kilo;
  // get smoothed value from the dataset:
  if (newDataReady) {
    if (millis() > t + serialPrintInterval) {
      float i = LoadCell.getData();
      float kg = i/1000;
      kilo = static_cast<int>(kg);
      newDataReady = 0;
  //    delay(2000);
      t = millis();
    }
  }
  n0.setValue(kilo);
  nb = 0.8*(kilo - minb)/(maxb-minb)+0.1;

  uint32_t usia;
  usia = n2.getValue(&usia);
  nu = 0.8*(usia - minu)/(maxu-minu)+0.1;
  
  input[0] = nt; 
  input[1] = nb; 
  input[2] = nu;
  output = NN->FeedForward(input); 
  
  if(output>0.5){
    Serial.println("Tinggi");  
  }else{
    Serial.println("Rendah");
  }
  delay(1500);
}
